} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "ols")
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "logit")
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "logic")
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "logit")
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "LOGIT")
tolower
explore_bivariate <- function(data, dependent, independent, p_value = 0.05, type = "graph",
model_type = "ols") {
# getting the names of all the variables
variables <- colnames(data)
# getting the names of the independnet variables
independent_text <- independent
independent_variable <- data[, independent_text]
# setting the dv
dependent_text <- dependent
dependent_variable <- data[, dependent_text]
# setting the iv list
iv_list <- independent_text
# determining whether ols or logit
modelType <- ifelse(tolower(model_type) == "ols", "gaussian",
ifelse(tolower(model_type) == "logit", "binomial",
"please select either 'ols' or 'logit'"))
# running the models
models <- lapply(iv_list, function(x) {
broom::tidy(glm(substitute(dv ~ i, list(dv = as.name(dependent_text),
i = as.name(x))),
data = data,
family = modelType))
})
# getting output
if(type == "graph") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::select(model_number, term, estimate, std.error) %>%
dplyr::mutate(lower = (estimate - (std.error * 1.96)),
upper = (estimate + (std.error * 1.96)),
term = forcats::fct_reorder(term, estimate),
significance = ifelse(estimate > 0 & lower > 0, "positive",
ifelse(estimate < 0 & upper < 0, "negative", "not significant"))) %>%
ggplot2::ggplot(ggplot2::aes(x = term, y = estimate,
ymin = lower, ymax = upper, color = significance)) +
ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "logit")
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "ols")
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "OLS")
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "OLG")
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "LOGIT")
explore_bivariate(titanic::titanic_train, "Survived", c("Pclass", "Sex", "Age"),
model_type = "LOGiT")
knitr::opts_chunk$set(echo = TRUE)
mtcars
library(tidyverse)
mtcars
mtcars %>%
mutate(mpg = ifelse(mpg > 21, NA, mpg),
disp = ifelse(disp > 300, NA, disp))
missing <- mtcars %>%
mutate(mpg = ifelse(mpg > 21, NA, mpg),
disp = ifelse(disp > 300, NA, disp))
column_missing_data <- sapply(missing, function(x) sum(is.na(x)))
columns <- colnames(missing)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
variable_missing_data
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::select(-V1) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(variable_missing_data),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::select(-V1) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::select(-V1) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100))
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing))
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = V1)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_label()
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = V1)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text()
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = V1)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text() +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = V1)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = V1)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing Observations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing Observations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text() +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing Observations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(vjust = 1) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing Observations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing Observations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.5) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing Observations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObservations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(missing),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObservations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
}
}
check_missing_variables(missing)
#'
#' @return If there is no missing data the function will return a string
#' informing you that there is no missing data. Otherwise a graph will
#' appear showing the variable one the y axis and the percent missing on the x-axis.
#'
#' @export
#'
#' @examples
#' check_missing_variables(cars) # no missing data
#' check_missing_variables(airquality) # shows missing data
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObservations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
}
}
check_missing_variables(airquality)
library(tidyverse)
check_missing_variables(airquality)
check_missing_variables(cars)
#'
#' @return If there is no missing data the function will return a string
#' informing you that there is no missing data. Otherwise a graph will
#' appear showing the variable one the y axis and the percent missing on the x-axis.
#'
#' @export
#'
#' @examples
#' check_missing_variables(cars) # no missing data
#' check_missing_variables(airquality) # shows missing data
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObs")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
}
}
check_missing_variables(airquality)
#'
#' @return If there is no missing data the function will return a string
#' informing you that there is no missing data. Otherwise a graph will
#' appear showing the variable one the y axis and the percent missing on the x-axis.
#'
#' @export
#'
#' @examples
#' check_missing_variables(cars) # no missing data
#' check_missing_variables(airquality) # shows missing data
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "\nMissing Obs")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
}
}
check_missing_variables(airquality)
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
dataset <- read_excel("R:\Level 2\17-18_All Schools.xlsx")
dataset <- read_excel("R:/Level 2/17-18_All Schools.xlsx")
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
View(variable_missing_data)
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObservations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObservations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = V1)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
check_missing_variables(dataset)
