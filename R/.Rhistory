return("Yay! You have no missing data")
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::select(-V1) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot(aes(factor(columns), percent_missing, fill = percent_missing)) +
geom_col()  +
labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
coord_flip() +
scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
}
}
#'
#' This function returns a graph that shows variable missingness across the
#' entire dataset.
#'
#' @return If there is no missing data the function will return a string
#' informing you that there is no missing data. Otherwise a graph will
#' appear showing the variable one the y axis and the percent missing on the x-axis.
#'
#' @examples
#' c
check_missing_variables(cars)
airquality
check_missing_variables(airquality)
check_missing_variables(airquality)
#' This function returns a graph that shows variable missingness across the
#' entire dataset.
#'
#' @return If there is no missing data the function will return a string
#' informing you that there is no missing data. Otherwise a graph will
#' appear showing the variable one the y axis and the percent missing on the x-axis.
#'
#' @examples
#' check_missing_variables(cars) # no missing data
#' check_missing_variables(airquality)
check_missing_variables(cars)
check_missing_variables(airquality)
library(tidyverse)
check_missing_variables(airquality)
test <- seq(1:10)
check_missing_variables(test)
cars <- as.matrix(cars)
cars
str(cars)
cars2 <- as.matrix(cars)
check_missing_variables(cars2)
check_missing_variables("Richard is great")
library(devtools)
document()
model <- lm(mpg ~ cyl, data = mtcars)
check_assumptions(model)
cars
model2 <- lm(mpg ~ cyl + wt, data = ggplot2::mtcars)
model2 <- lm(mpg ~ cyl + wt, data = mtcars)
check_assumptions(model2)
document()
?check_assumptions
document()
document
document()
?check_assumptions
?tidy_labels
accesslex_colors <- c(`main blue` = "#002b49",
`main light blue` = "#006072",
`second yellow` = "#d18a00",
`second orange` = "#d35e13",
`second red` = "#8f1336",
`second maroon` = "#632d4f",
`third green` = "#556221",
`third blue gray` = "#4b4f54",
`third light blue` = "#7e9bc0")
al_colors <- function(...) {
colors <- c(...)
if(is.null(colors))
return(accesslex_colors)
accesslex_colors[colors]
}
accesslex_palettes <- list(
`main` = al_colors("main light blue", "second yellow", "third blue gray"),
`three` = al_colors("main blue", "second orange", "third green"),
`five` = al_colors("main light blue", "second maroon", "third green", "second orange", "third light blue"),
`seven` = al_colors("main blue", "second red", "main light blue", "second yellow", "third green", "second orange",
"third blue"),
`nine` = al_colors(),
`diverging` = al_colors("third light blue", "second orange")
)
al_palette <- function(palette = "main", reverse = FALSE, ...) {
pal <- accesslex_palettes[[palette]]
if(reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
# al_palette("five")
#
# al_palette("diverging")
# al_palette("diverging")(10)
library(roxygen2)
bivariate_tests <- function(data, dependent, independent, p_value = 0.05, type = "graph") {
# getting the names of all the variables
variables <- colnames(data)
# getting the names of the independnet variables
independent_text <- independent
independent_variable <- data[, independent_text]
# setting the dv
dependent_text <- dependent
dependent_variable <- data[, dependent_text]
# setting the iv list
iv_list <- independent_text
# running the models
models <- lapply(iv_list, function(x) {
broom::tidy(glm(substitute(dv ~ i, list(dv = as.name(dependent_text),
i = as.name(x))),
data = data))
})
# getting output
if(type == "graph") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::select(model_number, term, estimate, std.error) %>%
dplyr::mutate(term = str_replace(term, "bar_prep\\$", "")) %>%
dplyr::mutate(lower = (estimate - (std.error * 1.96)),
upper = (estimate + (std.error * 1.96)),
term = fct_reorder(term, estimate),
significance = ifelse(estimate > 0 & lower > 0, "positive",
ifelse(estimate < 0 & upper < 0, "negative", "not significant"))) %>%
ggplot2::ggplot(aes(x = term, y = estimate,
ymin = lower, ymax = upper, color = significance)) +
ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
library(gapminder)
data("gapminder")
mtcars
data(mtcars)
bivariate_tests(gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
library(magrittr)
bivariate_tests <- function(data, dependent, independent, p_value = 0.05, type = "graph") {
# getting the names of all the variables
variables <- colnames(data)
# getting the names of the independnet variables
independent_text <- independent
independent_variable <- data[, independent_text]
# setting the dv
dependent_text <- dependent
dependent_variable <- data[, dependent_text]
# setting the iv list
iv_list <- independent_text
# running the models
models <- lapply(iv_list, function(x) {
broom::tidy(glm(substitute(dv ~ i, list(dv = as.name(dependent_text),
i = as.name(x))),
data = data))
})
# getting output
if(type == "graph") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::select(model_number, term, estimate, std.error) %>%
dplyr::mutate(term = str_replace(term, "bar_prep\\$", "")) %>%
dplyr::mutate(lower = (estimate - (std.error * 1.96)),
upper = (estimate + (std.error * 1.96)),
term = fct_reorder(term, estimate),
significance = ifelse(estimate > 0 & lower > 0, "positive",
ifelse(estimate < 0 & upper < 0, "negative", "not significant"))) %>%
ggplot2::ggplot(aes(x = term, y = estimate,
ymin = lower, ymax = upper, color = significance)) +
ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
bivariate_tests(gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
bivariate_tests(gapminder, "lifeExp", c("gdpPercap", "continent"))
bivariate_tests <- function(data, dependent, independent, p_value = 0.05, type = "graph") {
# getting the names of all the variables
variables <- colnames(data)
# getting the names of the independnet variables
independent_text <- independent
independent_variable <- data[, independent_text]
# setting the dv
dependent_text <- dependent
dependent_variable <- data[, dependent_text]
# setting the iv list
iv_list <- independent_text
# running the models
models <- lapply(iv_list, function(x) {
broom::tidy(glm(substitute(dv ~ i, list(dv = as.name(dependent_text),
i = as.name(x))),
data = data))
})
# getting output
if(type == "graph") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::select(model_number, term, estimate, std.error) %>%
dplyr::mutate(lower = (estimate - (std.error * 1.96)),
upper = (estimate + (std.error * 1.96)),
term = fct_reorder(term, estimate),
significance = ifelse(estimate > 0 & lower > 0, "positive",
ifelse(estimate < 0 & upper < 0, "negative", "not significant"))) %>%
ggplot2::ggplot(aes(x = term, y = estimate,
ymin = lower, ymax = upper, color = significance)) +
ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
bivariate_tests(gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
bivariate_tests(gapminder, "lifeExp", c("gdpPercap", "continent"))
bivariate_tests <- function(data, dependent, independent, p_value = 0.05, type = "graph") {
# getting the names of all the variables
variables <- colnames(data)
# getting the names of the independnet variables
independent_text <- independent
independent_variable <- data[, independent_text]
# setting the dv
dependent_text <- dependent
dependent_variable <- data[, dependent_text]
# setting the iv list
iv_list <- independent_text
# running the models
models <- lapply(iv_list, function(x) {
broom::tidy(glm(substitute(dv ~ i, list(dv = as.name(dependent_text),
i = as.name(x))),
data = data))
})
# getting output
if(type == "graph") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::select(model_number, term, estimate, std.error) %>%
dplyr::mutate(lower = (estimate - (std.error * 1.96)),
upper = (estimate + (std.error * 1.96)),
term = forcats::fct_reorder(term, estimate),
significance = ifelse(estimate > 0 & lower > 0, "positive",
ifelse(estimate < 0 & upper < 0, "negative", "not significant"))) %>%
ggplot2::ggplot(aes(x = term, y = estimate,
ymin = lower, ymax = upper, color = significance)) +
ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
bivariate_tests(gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
bivariate_tests(gapminder, "lifeExp", c("gdpPercap", "continent"))
bivariate_tests <- function(data, dependent, independent, p_value = 0.05, type = "graph") {
# getting the names of all the variables
variables <- colnames(data)
# getting the names of the independnet variables
independent_text <- independent
independent_variable <- data[, independent_text]
# setting the dv
dependent_text <- dependent
dependent_variable <- data[, dependent_text]
# setting the iv list
iv_list <- independent_text
# running the models
models <- lapply(iv_list, function(x) {
broom::tidy(glm(substitute(dv ~ i, list(dv = as.name(dependent_text),
i = as.name(x))),
data = data))
})
# getting output
if(type == "graph") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::select(model_number, term, estimate, std.error) %>%
dplyr::mutate(lower = (estimate - (std.error * 1.96)),
upper = (estimate + (std.error * 1.96)),
term = forcats::fct_reorder(term, estimate),
significance = ifelse(estimate > 0 & lower > 0, "positive",
ifelse(estimate < 0 & upper < 0, "negative", "not significant"))) %>%
ggplot2::ggplot(ggplot2::aes(x = term, y = estimate,
ymin = lower, ymax = upper, color = significance)) +
ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
bivariate_tests(gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
bivariate_tests(gapminder, "lifeExp", c("gdpPercap", "continent"))
bivariate_tests(mtcars, "mpg", c("cyl", "disp", "hp", "drat"), p_value = 0.00001)
bivariate_tests(mtcars, names(mtcars)[1], names(mtcars)[-1])
gapminder::gapminder
#' fixed at 95% confidence intervals
#' @param type Specifies the type of output request.  either 'graph' or 'table'
#'
#' @export
#'
#' @examples
#' explore_bivariate(gapminder::gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
#' explore_bivariate(gapminder::gapminder, "lifeExp", c("gdpPercap", "continent"))
#' explore_bivariate(mtcars, "mpg", c("cyl", "disp", "hp", "drat"), p_value = 0.00001)
#' explore_bivariate(mtcars, names(mtcars)[1], names(mtcars)[-1])
explore_bivariate <- function(data, dependent, independent, p_value = 0.05, type = "graph") {
# getting the names of all the variables
variables <- colnames(data)
# getting the names of the independnet variables
independent_text <- independent
independent_variable <- data[, independent_text]
# setting the dv
dependent_text <- dependent
dependent_variable <- data[, dependent_text]
# setting the iv list
iv_list <- independent_text
# running the models
models <- lapply(iv_list, function(x) {
broom::tidy(glm(substitute(dv ~ i, list(dv = as.name(dependent_text),
i = as.name(x))),
data = data))
})
# getting output
if(type == "graph") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::select(model_number, term, estimate, std.error) %>%
dplyr::mutate(lower = (estimate - (std.error * 1.96)),
upper = (estimate + (std.error * 1.96)),
term = forcats::fct_reorder(term, estimate),
significance = ifelse(estimate > 0 & lower > 0, "positive",
ifelse(estimate < 0 & upper < 0, "negative", "not significant"))) %>%
ggplot2::ggplot(ggplot2::aes(x = term, y = estimate,
ymin = lower, ymax = upper, color = significance)) +
ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
explore_bivariate(gapminder::gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
explore_bivariate(gapminder::gapminder, "lifeExp", c("gdpPercap", "continent"))
explore_bivariate(gapminder::gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
#' fixed at 95% confidence intervals
#' @param type Specifies the type of output request.  either 'graph' or 'table'
#'
#' @export
#'
#' @examples
#' explore_bivariate(gapminder::gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
#' explore_bivariate(gapminder::gapminder, "lifeExp", c("gdpPercap", "continent"))
#' explore_bivariate(mtcars, "mpg", c("cyl", "disp", "hp", "drat"), p_value = 0.00001)
#' explore_bivariate(mtcars, names(mtcars)[1], names(mtcars)[-1])
explore_bivariate <- function(data, dependent, independent, p_value = 0.05, type = "graph") {
# getting the names of all the variables
variables <- colnames(data)
# getting the names of the independnet variables
independent_text <- independent
independent_variable <- data[, independent_text]
# setting the dv
dependent_text <- dependent
dependent_variable <- data[, dependent_text]
# setting the iv list
iv_list <- independent_text
# running the models
models <- lapply(iv_list, function(x) {
broom::tidy(glm(substitute(dv ~ i, list(dv = as.name(dependent_text),
i = as.name(x))),
data = data))
})
# getting output
if(type == "graph") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::select(model_number, term, estimate, std.error) %>%
dplyr::mutate(lower = (estimate - (std.error * 1.96)),
upper = (estimate + (std.error * 1.96)),
term = forcats::fct_reorder(term, estimate),
significance = ifelse(estimate > 0 & lower > 0, "positive",
ifelse(estimate < 0 & upper < 0, "negative", "not significant"))) %>%
ggplot2::ggplot(ggplot2::aes(x = term, y = estimate,
ymin = lower, ymax = upper, color = significance)) +
ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
explore_bivariate(gapminder::gapminder, "lifeExp", c("gdpPercap", "continent"), type = "table")
explore_bivariate(gapminder::gapminder, "lifeExp", c("gdpPercap", "continent"))
explore_bivariate(mtcars, "mpg", c("cyl", "disp", "hp", "drat"), p_value = 0.00001)
explore_bivariate(mtcars, names(mtcars)[1], names(mtcars)[-1])
