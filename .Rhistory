ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
explore_bivariate(mtcars, "mpg", c("cyl", "disp", "hp", "drat"), p_value = 0.00001)
explore_bivariate <- function(data, dependent, independent, p_value = 0.05, type = "graph",
model_type = "ols") {
# getting the names of all the variables
variables <- colnames(data)
# getting the names of the independnet variables
independent_text <- independent
independent_variable <- data[, independent_text]
# setting the dv
dependent_text <- dependent
dependent_variable <- data[, dependent_text]
# setting the iv list
iv_list <- independent_text
# determining whether ols or logit
modelType <- ifelse(tolower(model_type) == "ols", "gaussian",
ifelse(tolower(model_type) == "logit", "binomial",
"please select either 'ols' or 'logit'"))
# running the models
models <- lapply(iv_list, function(x) {
broom::tidy(glm(substitute(dv ~ i, list(dv = as.name(dependent_text),
i = as.name(x))),
data = data,
family = modelType))
})
# getting output
if(type == "graph") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(cols = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::select(model_number, term, estimate, std.error) %>%
dplyr::mutate(lower = (estimate - (std.error * 1.96)),
upper = (estimate + (std.error * 1.96)),
term = forcats::fct_reorder(term, estimate),
significance = ifelse(estimate > 0 & lower > 0, "positive",
ifelse(estimate < 0 & upper < 0, "negative", "not significant"))) %>%
ggplot2::ggplot(ggplot2::aes(x = term, y = estimate,
ymin = lower, ymax = upper, color = significance)) +
ggplot2::theme_minimal() +
ggplot2::geom_hline(yintercept = 0.0, color = "red", lty = 2) +
ggplot2::geom_point() +
ggplot2::geom_linerange() +
ggplot2::labs(title = "Results are from bivariate tests, not a single model.",
caption = "Graph results show a 95% confidence interval",
x = "", y = "Coefficient") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("red2", "gray", "#7CAE00"))
return(results)
} else if(type == "table") {
results <- models %>%
tibble::tibble() %>%
tidyr::unnest(.id = "model_number") %>%
dplyr::filter(term != "(Intercept)") %>%
dplyr::mutate(significance = ifelse(p.value < p_value, 1, 0))
return(results)
} else {
return("Please select either 'graph' or 'table' for type")
}
}
explore_bivariate(mtcars, "mpg", c("cyl", "disp", "hp", "drat"), p_value = 0.00001)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(psych)
library(sem)
library(broom)
all_schools <- read_excel("R:/Level 2/17-18_All Schools.xlsx") %>%
filter(BarResult!="Did not take")
all_schools$Race2 <- ifelse(all_schools$Race=="Black or African American" |
all_schools$Race=="Black or African american",
paste("Black"),
all_schools$Race)
all_schools$Race2 <- ifelse(all_schools$Race=="Hispanics of any race",
paste("Hispanic"), all_schools$Race2)
all_schools$Race2 <- ifelse(all_schools$Race=="White",
paste("White"), all_schools$Race2)
all_schools$Race2 <- ifelse(all_schools$Race=="Asian",
paste("Asian"), all_schools$Race2)
all_schools$Race2 <- ifelse(all_schools$Race=="American Indian or Alaska Native" |
all_schools$Race=="Native Hawaiian or Other Pacific Islander",
paste("Other"), all_schools$Race2)
all_schools$Race2 <- ifelse(all_schools$Race=="Nonresident alien"|
all_schools$Race=="Two or More Races" |
all_schools$Race=="Race and Ethnicity Unknown",
paste("Other"), all_schools$Race2)
all_schools$Race2 <- factor(all_schools$Race2)
all_schools$Race2 <- factor(all_schools$Race2, levels=c("White", "Hispanic", "Asian", "Black", "Other"))
table(all_schools$Race2)
all_schools$SchoolID <- as.factor(all_schools$SchoolID)
all_schools$Gender <- as.factor(all_schools$Gender)
bar_prep <- all_schools %>%
group_by(SchoolID) %>%
mutate(scaled_yr1 = round(scale(Yr1_GPA), 2)) %>%
ungroup() %>%
select(BarResult, UGPA, LSAT, scaled_yr1, Race2, Gender,
SchoolID, CreditHrs_Doctrinal, firstgen,
LTTLL, envschol, exams, gnleged, memorize) %>%
na.omit() %>%
mutate(BarResult = ifelse(BarResult=="Pass", 1, 0)) %>%
select(SchoolID, everything()) %>%
mutate(firstgen = firstgen -1,
envschol = ifelse(envschol <=2, 0,
ifelse(envschol == 3, 1, 2)), # very little or some = 0, quite a bit = 1, very much = 2
exams = ifelse(exams <= 3, 0,
ifelse(exams == 4, 1, 2)), # very little to 3 (not specified) = 0, 4 (middle) = 1, 5 to very much = 2
gnleged = ifelse(gnleged <=2, 0,
ifelse(gnleged==3, 1, 2)), # very little or some = 0, quiet a bit = 1, very much = 2
memorize = ifelse(memorize <=2, 0,
ifelse(memorize == 3, 1, 2))) # very little or some = 0, quiet a bit = 1, very much = 2
Prep_model <- glm(BarResult ~ .,data=bar_prep, family="binomial")
summary(Prep_model)
Prep_model2 <- glm(BarResult ~ LTTLL + envschol + exams + gnleged + memorize, data=bar_prep, family = "binomial")
summary(Prep_model2)
car::vif(Prep_model2)
variables <- colnames(bar_prep) %>%
as_tibble() %>%
filter(value != "SchoolID")
iv_list <- names(bar_prep) [3:14]
BarResult <- bar_prep$BarResult
SchoolID <- bar_prep$SchoolID
model <- lapply(iv_list, function(x) {
tidy(glm(substitute(BarResult ~ bar_prep$i + SchoolID, list(i = as.name(x))), family = "binomial"))
})
model_glance <- lapply(iv_list, function(x) {
glance(glm(substitute(BarResult ~bar_prep$i + SchoolID, list(i = as.name(x))), family = "binomial"))
})
model %>%
tibble()
model %>%
tibble() %>%
unnest(.id = "model_number")
model %>%
tibble::tibble() %>%
dplyr::mutate(id = names(.)) %>%
tidyr::unnest(.)
model %>%
tibble::tibble() %>%
dplyr::mutate(id = names(.)) %>%
tidyr::unnest(cols = c(,))
model %>%
tibble::tibble() %>%
dplyr::mutate(id = names(.)) %>%
tidyr::unnest(cols = c(.))
model %>%
tibble::tibble() %>%
dplyr::mutate(id = names(x)) %>%
tidyr::unnest(cols = c(.))
model %>%
tibble::tibble() %>%
tidyr::unnest(cols = c(.))
check()
check()
devtools::use_vignette("my-vignette")
use_vignette("researchr-vignette")
library(devtools)
document()
knitr::opts_chunk$set(echo = TRUE)
library(researchr)
diamonds <- ggplot2::diamonds
check_missing_variables(diamonds)
explore_bivariate(data = diamonds, dependent = "price",
independent = c("carat", "cut", "color", "clarity"))
model <- lm(price ~ carat + cut + color + clarity, data = diamonds)
check_assumptions(model)
create_predictions(model, diamonds, carat)
library(tidyverse)
create_predictions(model, diamonds, carat) %>%
ggplot(aes(x = carat, y = pred)) +
geom_line()
create_predictions(model, diamonds, carat, clarity) %>%
ggplot(aes(x = carat, y = pred, color = clarity)) +
geom_line()
model
explain_results(model, "color.L")
devtools::document()
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
number_of_variables <- variable_missing_data[variable_missing_data$V1 != 0, ]
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else if(nrow(number_of_variables) > 10) {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObservations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100), low = "light blue", high = "dark red", mid = "light blue")
}
}
check_missing_variables(airquality)
library(magrittr)
check_missing_variables(airquality)
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
number_of_variables <- variable_missing_data[variable_missing_data$V1 != 0, ]
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else if(nrow(number_of_variables) > 10) {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_x_continuous(limits = c(0, 1))
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObservations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_x_continuous(limits = c(0, 1))
}
}
check_missing_variables(airquality)
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
number_of_variables <- variable_missing_data[variable_missing_data$V1 != 0, ]
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else if(nrow(number_of_variables) > 10) {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 1))
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObservations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 1))
}
}
check_missing_variables(airquality)
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
number_of_variables <- variable_missing_data[variable_missing_data$V1 != 0, ]
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else if(nrow(number_of_variables) > 10) {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 100))
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100),
missing = paste(V1, "Missing \nObservations")) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing,
label = missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::geom_text(hjust = 1.3) +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 100))
}
}
check_missing_variables(airquality)
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
number_of_variables <- variable_missing_data[variable_missing_data$V1 != 0, ]
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else if(nrow(number_of_variables) > 10) {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 100))
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100))) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 100))
}
}
check_missing_variables(airquality)
check_missing_variables(airquality)
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
number_of_variables <- variable_missing_data[variable_missing_data$V1 != 0, ]
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else if(nrow(number_of_variables) > 10) {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 100))
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100))) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 100))
}
}
check_missing_variables <- function(dataset) {
column_missing_data <- sapply(dataset, function(x) sum(is.na(x)))
columns <- colnames(dataset)
variable_missing_data <- as.data.frame(cbind(as.numeric(column_missing_data),
columns))
variable_missing_data$num_rows_NA <- as.numeric(as.character(variable_missing_data$V1))
number_of_variables <- variable_missing_data[variable_missing_data$V1 != 0, ]
if(all(variable_missing_data[, 1] == 0)) {
return("Yay! You have no missing data")
} else if(nrow(number_of_variables) > 10) {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 100))
} else {
variable_missing_data %>%
dplyr::mutate(proportion_missing = num_rows_NA / nrow(dataset),
percent_missing = (proportion_missing * 100)) %>%
dplyr::arrange(desc(percent_missing)) %>%
dplyr::filter(percent_missing != 0) %>%
dplyr::mutate(columns = reorder(columns, percent_missing)) %>%
ggplot2::ggplot(ggplot2::aes(factor(columns), percent_missing, fill = percent_missing)) +
ggplot2::geom_col()  +
ggplot2::labs(x = "Original Variables", y ="Percentage of Observations that are Missing",
fill = "Percent Missing") +
ggplot2::coord_flip() +
ggplot2::scale_fill_gradient2(limits = c(0, 100),
low = "light blue", high = "dark red",
mid = "light blue") +
ggplot2::scale_y_continuous(limits = c(0, 100))
}
}
check_missing_variables(airquality)
